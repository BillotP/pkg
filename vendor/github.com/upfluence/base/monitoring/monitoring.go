// Autogenerated by Thrift Compiler (1.0.0-upfluence)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package monitoring

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var _ = time.Now()

type Monitoring interface {
	// Parameters:
	//  - Metrics
	Collect(metrics []string) (r Metrics, err error)
}

type MonitoringClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMonitoringClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MonitoringClient {
	return &MonitoringClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMonitoringClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MonitoringClient {
	return &MonitoringClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Metrics
func (p *MonitoringClient) Collect(metrics []string) (r Metrics, err error) {
	t0 := time.Now().UnixNano()
	if err = p.sendCollect(metrics); err != nil {
		return
	}
	r, err = p.recvCollect()
	t1 := time.Now().UnixNano()
	thrift.Metrics.Timing("Monitoring.Collect.client", t1-t0)
	if err == nil {
		thrift.Metrics.Incr("Monitoring.Collect.client.success")
	} else {
		thrift.Metrics.Incr("Monitoring.Collect.client.exceptions.application_error")
	}
	return
}

func (p *MonitoringClient) sendCollect(metrics []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("collect", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MonitoringCollectArgs{
		Metrics: metrics,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MonitoringClient) recvCollect() (value Metrics, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "collect" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "collect failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "collect failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "collect failed: invalid message type")
		return
	}
	result := MonitoringCollectResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.ServiceUnavailable != nil {
		err = result.ServiceUnavailable
		return
	} else if result.UnknownMetric != nil {
		err = result.UnknownMetric
		return
	}
	value = result.GetSuccess()
	return
}

type MonitoringProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Monitoring
}

func (p *MonitoringProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MonitoringProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MonitoringProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMonitoringProcessor(handler Monitoring) *MonitoringProcessor {

	self2 := &MonitoringProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self2.processorMap["collect"] = &monitoringProcessorCollect{handler: handler}
	return self2
}

func (p *MonitoringProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3

}

type monitoringProcessorCollect struct {
	handler Monitoring
}

func (p *monitoringProcessorCollect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MonitoringCollectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("collect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MonitoringCollectResult{}
	var retval Metrics
	var err2 error
	t0 := time.Now().UnixNano()
	if retval, err2 = p.handler.Collect(args.Metrics); err2 != nil {
		switch v := err2.(type) {
		case *ServiceNotAvailable:
			thrift.Metrics.Incr("Monitoring.collect.server.exceptions.*ServiceNotAvailable")
			result.ServiceUnavailable = v
		case *UnknownMetric:
			thrift.Metrics.Incr("Monitoring.collect.server.exceptions.*UnknownMetric")
			result.UnknownMetric = v
		default:
			thrift.Metrics.Incr("Monitoring.collect.server.success")
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing collect: "+err2.Error())
			oprot.WriteMessageBegin("collect", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			thrift.Metrics.Incr("Monitoring.collect.server.exceptions.application_error")
			return true, err2
		}
	} else {
		thrift.Metrics.Incr("Monitoring.collect.server.success")
		result.Success = retval
	}

	t1 := time.Now().UnixNano()
	thrift.Metrics.Timing("Monitoring.collect.server", t1-t0)

	if err2 = oprot.WriteMessageBegin("collect", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Metrics
type MonitoringCollectArgs struct {
	Metrics []string `thrift:"metrics,1" json:"metrics"`
}

func NewMonitoringCollectArgs() *MonitoringCollectArgs {
	return &MonitoringCollectArgs{}
}

func (p *MonitoringCollectArgs) GetMetrics() []string {
	return p.Metrics
}
func (p *MonitoringCollectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MonitoringCollectArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Metrics = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.Metrics = append(p.Metrics, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MonitoringCollectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("collect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MonitoringCollectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metrics", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metrics: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Metrics)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Metrics {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metrics: ", p), err)
	}
	return err
}

func (p *MonitoringCollectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MonitoringCollectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ServiceUnavailable
//  - UnknownMetric
type MonitoringCollectResult struct {
	Success            Metrics              `thrift:"success,0" json:"success,omitempty"`
	ServiceUnavailable *ServiceNotAvailable `thrift:"serviceUnavailable,1" json:"serviceUnavailable,omitempty"`
	UnknownMetric      *UnknownMetric       `thrift:"unknownMetric,2" json:"unknownMetric,omitempty"`
}

func NewMonitoringCollectResult() *MonitoringCollectResult {
	return &MonitoringCollectResult{}
}

var MonitoringCollectResult_Success_DEFAULT Metrics

func (p *MonitoringCollectResult) GetSuccess() Metrics {
	return p.Success
}

var MonitoringCollectResult_ServiceUnavailable_DEFAULT *ServiceNotAvailable

func (p *MonitoringCollectResult) GetServiceUnavailable() *ServiceNotAvailable {
	if !p.IsSetServiceUnavailable() {
		return MonitoringCollectResult_ServiceUnavailable_DEFAULT
	}
	return p.ServiceUnavailable
}

var MonitoringCollectResult_UnknownMetric_DEFAULT *UnknownMetric

func (p *MonitoringCollectResult) GetUnknownMetric() *UnknownMetric {
	if !p.IsSetUnknownMetric() {
		return MonitoringCollectResult_UnknownMetric_DEFAULT
	}
	return p.UnknownMetric
}
func (p *MonitoringCollectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MonitoringCollectResult) IsSetServiceUnavailable() bool {
	return p.ServiceUnavailable != nil
}

func (p *MonitoringCollectResult) IsSetUnknownMetric() bool {
	return p.UnknownMetric != nil
}

func (p *MonitoringCollectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MonitoringCollectResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Metrics, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key5 MetricID
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := MetricID(v)
			_key5 = temp
		}
		var _val6 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val6 = v
		}
		p.Success[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MonitoringCollectResult) ReadField1(iprot thrift.TProtocol) error {
	p.ServiceUnavailable = NewServiceNotAvailable()
	if err := p.ServiceUnavailable.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceUnavailable), err)
	}
	return nil
}

func (p *MonitoringCollectResult) ReadField2(iprot thrift.TProtocol) error {
	p.UnknownMetric = NewUnknownMetric()
	if err := p.UnknownMetric.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownMetric), err)
	}
	return nil
}

func (p *MonitoringCollectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("collect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MonitoringCollectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.DOUBLE, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MonitoringCollectResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceUnavailable() {
		if err := oprot.WriteFieldBegin("serviceUnavailable", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceUnavailable: ", p), err)
		}
		if err := p.ServiceUnavailable.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceUnavailable), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceUnavailable: ", p), err)
		}
	}
	return err
}

func (p *MonitoringCollectResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnknownMetric() {
		if err := oprot.WriteFieldBegin("unknownMetric", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unknownMetric: ", p), err)
		}
		if err := p.UnknownMetric.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownMetric), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unknownMetric: ", p), err)
		}
	}
	return err
}

func (p *MonitoringCollectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MonitoringCollectResult(%+v)", *p)
}
